---
description: 
globs: 
alwaysApply: true
---
# Unity Game Development - Cursor Rules
# 유니티 게임 개발을 위한 커서 AI 규칙

## 일반 규칙 (General Rules)
- 모든 주석과 문서는 한국어와 영어를 병행하여 작성
- 코드는 가독성과 유지보수성을 최우선으로 작성
- Unity 코딩 컨벤션을 준수
- SOLID 원칙을 따르는 객체지향 설계

## 코딩 컨벤션 (Coding Conventions)

### 네이밍 컨벤션
- **클래스명**: PascalCase (예: PlayerController, GameManager)
- **메서드명**: PascalCase (예: MovePlayer, UpdateHealth)
- **변수명**: camelCase (예: playerHealth, currentScore)
- **상수명**: UPPER_SNAKE_CASE (예: MAX_HEALTH, DEFAULT_SPEED)
- **프라이빗 필드**: 언더스코어 접두사 (예: _health, _isActive)
- **퍼블릭 프로퍼티**: PascalCase (예: Health, IsActive)
- **이벤트명**: PascalCase with "On" prefix (예: OnPlayerDeath, OnScoreChanged)

### 파일 구조
- 스크립트는 기능별로 폴더 구조화 (Scripts/Player/, Scripts/UI/, Scripts/Managers/ 등)
- 한 파일당 하나의 클래스 원칙
- 파일명은 클래스명과 동일하게 작성

### Unity 특화 규칙

#### MonoBehaviour 클래스
```csharp
public class PlayerController : MonoBehaviour
{
    [Header("Player Settings")]
    [SerializeField] private float _moveSpeed = 5f;
    [SerializeField] private float _jumpForce = 10f;
    
    [Header("References")]
    [SerializeField] private Rigidbody2D _rb;
    [SerializeField] private Animator _animator;
    
    // Public properties for external access
    public float MoveSpeed => _moveSpeed;
    public bool IsGrounded { get; private set; }
    
    // Events
    public event System.Action OnJump;
    public event System.Action<float> OnHealthChanged;
    
    private void Awake()
    {
        // Initialize components
    }
    
    private void Start()
    {
        // Initialize game state
    }
    
    private void Update()
    {
        // Handle input and frame updates
    }
    
    private void FixedUpdate()
    {
        // Handle physics updates
    }
}
```

#### ScriptableObject 사용
- 게임 데이터는 ScriptableObject로 관리
- 설정값들은 하드코딩하지 말고 ScriptableObject로 분리

#### 싱글톤 패턴
```csharp
public class GameManager : MonoBehaviour
{
    public static GameManager Instance { get; private set; }
    
    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
    }
}
```

### 성능 최적화 규칙
1. **메모리 할당 최소화**
   - string 연산 대신 StringBuilder 사용
   - 반복문에서 new 키워드 사용 금지
   - Object pooling 적극 활용

2. **Update 메서드 최적화**
   - 매 프레임 실행이 필요하지 않은 코드는 코루틴 또는 InvokeRepeating 사용
   - 무거운 연산은 여러 프레임에 분산

3. **참조 캐싱**
   - GetComponent 호출 최소화
   - 자주 사용하는 컴포넌트는 Awake/Start에서 캐싱

### 에러 핸들링
- null 체크를 항상 수행
- try-catch 블록 적절히 사용
- 디버그 로그를 활용한 문제 추적

### 주석 규칙
```csharp
/// <summary>
/// 플레이어의 이동을 처리하는 메서드
/// Handles player movement
/// </summary>
/// <param name="direction">이동 방향 / Movement direction</param>
/// <param name="speed">이동 속도 / Movement speed</param>
public void MovePlayer(Vector2 direction, float speed)
{
    // 이동 로직 구현
    // Implementation of movement logic
}
```

### UI 관련 규칙
- UI 요소는 Canvas 그룹으로 관리
- UI 애니메이션은 DOTween 사용 권장
- UI와 게임 로직은 분리

### 오디오 관리
- AudioManager 싱글톤으로 중앙 관리
- 사운드 효과와 배경음악 분리
- 볼륨 설정은 PlayerPrefs로 저장

### 씬 관리
- 씬 전환은 SceneManager 사용
- 비동기 씬 로딩 적극 활용
- 씬별 초기화 로직 분리

### 입력 처리
- Unity Input System 사용 권장
- 입력 매핑은 설정 파일로 관리
- 멀티플랫폼 입력 고려

### 버전 관리
- 큰 기능 단위로 커밋
- 커밋 메시지는 한국어/영어 병행
- 브랜치 전략: feature/기능명, develop, main

### 테스트
- 유닛 테스트 작성 권장
- 플레이 테스트 시나리오 문서화
- 성능 프로파일링 정기 수행

### 보안
- 민감한 데이터는 암호화
- 치트 방지 로직 구현
- 서버 통신 데이터 검증

## 금지 사항
- public 변수 남용 (SerializeField 사용)
- 하드코딩된 문자열 사용
- 매직 넘버 사용
- 깊은 상속 구조
- 단일 책임 원칙 위반

## 권장 패턴
- Observer 패턴 (이벤트 시스템)
- Command 패턴 (입력 처리)
- State 패턴 (게임 상태 관리)
- Factory 패턴 (오브젝트 생성)
- Object Pool 패턴 (메모리 최적화)

이 규칙들을 준수하여 고품질의 유니티 게임을 개발하세요!



